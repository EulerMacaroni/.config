#!/usr/bin/env bash
# Direct OAuth refresh for himalaya (not mbsync)
# This refreshes tokens that himalaya actually uses

ACCOUNT="${1:-gmail}"

echo "Refreshing OAuth tokens for himalaya account: $ACCOUNT"

# First, try to find existing himalaya tokens
# Himalaya stores tokens with service="himalaya" and username="<account>-access-token" etc
ACCESS_TOKEN_KEY="${ACCOUNT}-access-token"
REFRESH_TOKEN_KEY="${ACCOUNT}-refresh-token"

# Check if refresh token exists in himalaya's storage
REFRESH_TOKEN=$(secret-tool lookup service himalaya username "${REFRESH_TOKEN_KEY}" 2>/dev/null)

if [ -z "$REFRESH_TOKEN" ]; then
  echo "No himalaya refresh token found for $ACCOUNT."
  echo "Trying himalaya-cli service..."
  
  # Try the himalaya-cli service (used by mbsync)
  if [[ "$ACCOUNT" == "gmail-imap" ]]; then
    REFRESH_TOKEN=$(secret-tool lookup service himalaya-cli username "gmail-imap-imap-oauth2-refresh-token" 2>/dev/null)
  else
    REFRESH_TOKEN=$(secret-tool lookup service himalaya-cli username "${ACCOUNT}-oauth2-refresh-token" 2>/dev/null)
  fi
fi

if [ -z "$REFRESH_TOKEN" ]; then
  echo "No refresh token found. Please run: himalaya account configure $ACCOUNT"
  exit 1
fi

# Get OAuth client credentials
CLIENT_ID="$GMAIL_CLIENT_ID"
CLIENT_SECRET="$GMAIL_CLIENT_SECRET"

# If not in environment, try to get from keyring
if [ -z "$CLIENT_SECRET" ]; then
  CLIENT_SECRET=$(secret-tool lookup service himalaya username "${ACCOUNT}-client-secret" 2>/dev/null)
  if [ -z "$CLIENT_SECRET" ] && [[ "$ACCOUNT" == "gmail-imap" ]]; then
    CLIENT_SECRET=$(secret-tool lookup service himalaya-cli username "gmail-imap-imap-oauth2-client-secret" 2>/dev/null)
  fi
fi

if [ -z "$CLIENT_ID" ] || [ -z "$CLIENT_SECRET" ]; then
  echo "Missing OAuth2 client credentials. Please ensure GMAIL_CLIENT_ID is set."
  exit 1
fi

# Refresh the access token using Google's OAuth2 endpoint
echo "Requesting new access token from Google..."
RESPONSE=$(curl -s -X POST https://www.googleapis.com/oauth2/v4/token \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "client_id=$CLIENT_ID" \
  -d "client_secret=$CLIENT_SECRET" \
  -d "refresh_token=$REFRESH_TOKEN" \
  -d "grant_type=refresh_token")

# Check if the response contains an error
if echo "$RESPONSE" | grep -q '"error"'; then
  echo "OAuth refresh failed:"
  echo "$RESPONSE"
  exit 1
fi

# Extract the new access token
# Find jq
JQ_CMD="jq"
if ! command -v jq >/dev/null 2>&1; then
  for JQ_PATH in /run/current-system/sw/bin/jq /nix/store/*/bin/jq; do
    if [[ -x "$JQ_PATH" ]]; then
      JQ_CMD="$JQ_PATH"
      break
    fi
  done
fi

ACCESS_TOKEN=$(echo "$RESPONSE" | "$JQ_CMD" -r '.access_token' 2>/dev/null)

if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
  echo "Failed to extract access token from response"
  echo "Response: $RESPONSE"
  exit 1
fi

# Store the new access token where himalaya expects it
echo "Storing new access token for himalaya..."
echo -n "$ACCESS_TOKEN" | secret-tool store --label="Himalaya OAuth2 Access Token for $ACCOUNT" \
  service himalaya \
  username "${ACCESS_TOKEN_KEY}"

# Also update himalaya-cli tokens for mbsync compatibility
if [[ "$ACCOUNT" == "gmail-imap" ]]; then
  echo -n "$ACCESS_TOKEN" | secret-tool store --label="Himalaya OAuth2 Access Token" \
    service himalaya-cli \
    username "gmail-imap-imap-oauth2-access-token"
fi

echo "OAuth tokens refreshed successfully for himalaya account: $ACCOUNT"